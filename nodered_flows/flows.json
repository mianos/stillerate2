[
    {
        "id": "b8f36cbcfc882e5f",
        "type": "tab",
        "label": "Still control panel",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "385758e29b926fb4",
        "type": "mqtt in",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "topic": "tele/still2/temp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3fe3ac59af05955a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 60,
        "wires": [
            [
                "433500282fc4c0ec"
            ]
        ]
    },
    {
        "id": "433500282fc4c0ec",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "split reflux and boiler",
        "func": "var sensors = ['reflux', 'boiler'];\nvar messages = [];\n\n// Iterate over the predefined sensor order\nfor (var i = 0; i < sensors.length; i++) {\n    var sensor = sensors[i];\n    \n    // Check if the current sensor is present in the payload\n    if (msg.payload.hasOwnProperty(sensor)) {\n        // Create a message for the current sensor\n        var message = {\n            topic: msg.topic + '/' + sensor, // Append sensor name to the topic\n            payload: msg.payload[sensor], // Set temperature as payload\n            timestamp: msg.payload.time // Include timestamp in the message\n        };\n\n        // Add the message to the array\n        messages.push(message);\n    } else {\n        // If the sensor is not present, add a null message to the array\n        messages.push(null);\n    }\n}\n\n// Return the array of messages\nreturn messages;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [
            [
                "9c157de7a8c8a93f"
            ],
            [
                "aac1b1fa69090b09"
            ]
        ]
    },
    {
        "id": "9c157de7a8c8a93f",
        "type": "ui-chart",
        "z": "b8f36cbcfc882e5f",
        "group": "5ee9dce5463cd662",
        "name": "",
        "label": "Reflux Temp",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "",
        "ymin": "",
        "ymax": "",
        "action": "append",
        "pointShape": "false",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "6",
        "height": "6",
        "className": "",
        "x": 710,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "aac1b1fa69090b09",
        "type": "ui-chart",
        "z": "b8f36cbcfc882e5f",
        "group": "5835c6daabcd58ef",
        "name": "",
        "label": "Boiler Temp",
        "order": 2,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "",
        "ymin": "",
        "ymax": "",
        "action": "append",
        "pointShape": "false",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "0",
        "height": "0",
        "className": "",
        "x": 710,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c43a0609f8d49024",
        "type": "mqtt in",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "topic": "tele/still2/pid",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3fe3ac59af05955a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 340,
        "wires": [
            [
                "719014c12aa211fb"
            ]
        ]
    },
    {
        "id": "719014c12aa211fb",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "function 1",
        "func": "var sensors = ['input_error', 'output'];\nvar messages = [];\n\n// Iterate over the predefined sensor order\nfor (var i = 0; i < sensors.length; i++) {\n    var sensor = sensors[i];\n    \n    // Check if the current sensor is present in the payload\n    if (msg.payload.hasOwnProperty(sensor)) {\n        // Create a message for the current sensor\n        var message = {\n            topic: msg.topic + '/' + sensor, // Append sensor name to the topic\n            payload: msg.payload[sensor], // Set temperature as payload\n            timestamp: msg.payload.time // Include timestamp in the message\n        };\n\n        // Add the message to the array\n        messages.push(message);\n    } else {\n        // If the sensor is not present, add a null message to the array\n        messages.push(null);\n    }\n}\n\n// Return the array of messages\nreturn messages;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 340,
        "wires": [
            [
                "1b4ddda823d0dc7e"
            ],
            [
                "b569b443fbd3d7f7"
            ]
        ]
    },
    {
        "id": "1b4ddda823d0dc7e",
        "type": "ui-chart",
        "z": "b8f36cbcfc882e5f",
        "group": "afe3e22da0747d54",
        "name": "",
        "label": "Input Error",
        "order": 4,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "",
        "ymin": "",
        "ymax": "",
        "action": "append",
        "pointShape": "false",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "0",
        "height": "0",
        "className": "",
        "x": 610,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b569b443fbd3d7f7",
        "type": "ui-chart",
        "z": "b8f36cbcfc882e5f",
        "group": "afe3e22da0747d54",
        "name": "",
        "label": "Output",
        "order": 3,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "",
        "ymin": "",
        "ymax": "",
        "action": "append",
        "pointShape": "false",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "0",
        "height": "0",
        "className": "",
        "x": 610,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "f6bd4dbda2cecba9",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.name",
                "pt": "msg",
                "to": "condenser",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 420,
        "wires": [
            [
                "89964bdd38b10dbc"
            ]
        ]
    },
    {
        "id": "89964bdd38b10dbc",
        "type": "mqtt out",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "topic": "cmnd/still2/pump",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3fe3ac59af05955a",
        "x": 650,
        "y": 420,
        "wires": []
    },
    {
        "id": "bc7e2436136eed79",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.value",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.name",
                "pt": "msg",
                "to": "reflux",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 480,
        "wires": [
            [
                "89964bdd38b10dbc"
            ]
        ]
    },
    {
        "id": "bde06e267b92f170",
        "type": "ui-slider",
        "z": "b8f36cbcfc882e5f",
        "group": "3a79b1215aa13ae5",
        "name": "",
        "label": "Condenser",
        "tooltip": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": true,
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "f6bd4dbda2cecba9"
            ]
        ]
    },
    {
        "id": "5ecf77648bbeeda7",
        "type": "ui-slider",
        "z": "b8f36cbcfc882e5f",
        "group": "3a79b1215aa13ae5",
        "name": "",
        "label": "Reflux - manual",
        "tooltip": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": true,
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "x": 160,
        "y": 480,
        "wires": [
            [
                "bc7e2436136eed79"
            ]
        ]
    },
    {
        "id": "f605620d23d27738",
        "type": "ui-text-input",
        "z": "b8f36cbcfc882e5f",
        "group": "e459568c74dfd8b2",
        "name": "",
        "label": "Target Temp",
        "order": 0,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "x": 510,
        "y": 940,
        "wires": [
            [
                "9b4087f10b4fcf62"
            ]
        ]
    },
    {
        "id": "c58c12c03de30f99",
        "type": "ui-text-input",
        "z": "b8f36cbcfc882e5f",
        "group": "e459568c74dfd8b2",
        "name": "",
        "label": "PID Period",
        "order": 0,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "f674675a643b348a"
            ]
        ]
    },
    {
        "id": "a83a0c73e4e7ede0",
        "type": "mqtt out",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "topic": "cmnd/still2/pid",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3fe3ac59af05955a",
        "x": 1160,
        "y": 680,
        "wires": []
    },
    {
        "id": "adece1794b5b00d0",
        "type": "mqtt out",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "topic": "cmnd/still2/pidrun",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3fe3ac59af05955a",
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "9b4087f10b4fcf62",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "parse string to float",
        "func": "// Parse the string received from the input field into a number\nvar numberValue = parseFloat(msg.payload);\n\n// Check if the parsed value is a valid number\nif (!isNaN(numberValue)) {\n    // Update the payload with the parsed number\n    msg.payload = numberValue;\n    return msg;\n} else {\n    // If the parsed value is not a valid number, log an error and return null\n    node.error('Invalid number received from input field: ' + msg.payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 940,
        "wires": [
            [
                "bb0b8fd17c112ee2"
            ]
        ]
    },
    {
        "id": "bb0b8fd17c112ee2",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.set_point",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 940,
        "wires": [
            [
                "a83a0c73e4e7ede0"
            ]
        ]
    },
    {
        "id": "f674675a643b348a",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "parse string to float",
        "func": "// Parse the string received from the input field into a number\nvar numberValue = parseFloat(msg.payload);\n\n// Check if the parsed value is a valid number\nif (!isNaN(numberValue)) {\n    // Update the payload with the parsed number\n    msg.payload = numberValue;\n    return msg;\n} else {\n    // If the parsed value is not a valid number, log an error and return null\n    node.error('Invalid number received from input field: ' + msg.payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 220,
        "wires": [
            [
                "234b38437b0d8855"
            ]
        ]
    },
    {
        "id": "234b38437b0d8855",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.period",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 220,
        "wires": [
            [
                "adece1794b5b00d0"
            ]
        ]
    },
    {
        "id": "ddb4b168328b970d",
        "type": "ui-text-input",
        "z": "b8f36cbcfc882e5f",
        "group": "2052b505fc6e7465",
        "name": "",
        "label": "kP",
        "order": 0,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "x": 490,
        "y": 580,
        "wires": [
            [
                "834563cdefeb56dd"
            ]
        ]
    },
    {
        "id": "834563cdefeb56dd",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "parse string to float",
        "func": "// Parse the string received from the input field into a number\nvar numberValue = parseFloat(msg.payload);\n\n// Check if the parsed value is a valid number\nif (!isNaN(numberValue)) {\n    // Update the payload with the parsed number\n    msg.payload = numberValue;\n    return msg;\n} else {\n    // If the parsed value is not a valid number, log an error and return null\n    node.error('Invalid number received from input field: ' + msg.payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 580,
        "wires": [
            [
                "cfe67fadacb67a6c"
            ]
        ]
    },
    {
        "id": "cfe67fadacb67a6c",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.kp",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 580,
        "wires": [
            [
                "a83a0c73e4e7ede0"
            ]
        ]
    },
    {
        "id": "771567b1dad70170",
        "type": "ui-text-input",
        "z": "b8f36cbcfc882e5f",
        "group": "2052b505fc6e7465",
        "name": "",
        "label": "kI",
        "order": 0,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "x": 490,
        "y": 620,
        "wires": [
            [
                "c425f6f6df97d0ee"
            ]
        ]
    },
    {
        "id": "c425f6f6df97d0ee",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "parse string to float",
        "func": "// Parse the string received from the input field into a number\nvar numberValue = parseFloat(msg.payload);\n\n// Check if the parsed value is a valid number\nif (!isNaN(numberValue)) {\n    // Update the payload with the parsed number\n    msg.payload = numberValue;\n    return msg;\n} else {\n    // If the parsed value is not a valid number, log an error and return null\n    node.error('Invalid number received from input field: ' + msg.payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 620,
        "wires": [
            [
                "3032e32150aed710"
            ]
        ]
    },
    {
        "id": "3032e32150aed710",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.ki",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 620,
        "wires": [
            [
                "a83a0c73e4e7ede0"
            ]
        ]
    },
    {
        "id": "0b36887f4db2b0a2",
        "type": "ui-text-input",
        "z": "b8f36cbcfc882e5f",
        "group": "2052b505fc6e7465",
        "name": "",
        "label": "kD",
        "order": 0,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "x": 490,
        "y": 660,
        "wires": [
            [
                "7aaf2f852623aa21"
            ]
        ]
    },
    {
        "id": "7aaf2f852623aa21",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "parse string to float",
        "func": "// Parse the string received from the input field into a number\nvar numberValue = parseFloat(msg.payload);\n\n// Check if the parsed value is a valid number\nif (!isNaN(numberValue)) {\n    // Update the payload with the parsed number\n    msg.payload = numberValue;\n    return msg;\n} else {\n    // If the parsed value is not a valid number, log an error and return null\n    node.error('Invalid number received from input field: ' + msg.payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 660,
        "wires": [
            [
                "38f90450d4834e5a"
            ]
        ]
    },
    {
        "id": "38f90450d4834e5a",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.kd",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 660,
        "wires": [
            [
                "a83a0c73e4e7ede0"
            ]
        ]
    },
    {
        "id": "0e9e6d50b83c4936",
        "type": "ui-text-input",
        "z": "b8f36cbcfc882e5f",
        "group": "e629bcb7c26cb922",
        "name": "",
        "label": "Max",
        "order": 0,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "x": 490,
        "y": 740,
        "wires": [
            [
                "259039efea24ce6c"
            ]
        ]
    },
    {
        "id": "259039efea24ce6c",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "parse string to float",
        "func": "// Parse the string received from the input field into a number\nvar numberValue = parseFloat(msg.payload);\n\n// Check if the parsed value is a valid number\nif (!isNaN(numberValue)) {\n    // Update the payload with the parsed number\n    msg.payload = numberValue;\n    return msg;\n} else {\n    // If the parsed value is not a valid number, log an error and return null\n    node.error('Invalid number received from input field: ' + msg.payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 740,
        "wires": [
            [
                "6f1d8f287380934c"
            ]
        ]
    },
    {
        "id": "6f1d8f287380934c",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.max_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 740,
        "wires": [
            [
                "a83a0c73e4e7ede0"
            ]
        ]
    },
    {
        "id": "2756333c07364ec5",
        "type": "ui-text-input",
        "z": "b8f36cbcfc882e5f",
        "group": "e629bcb7c26cb922",
        "name": "",
        "label": "Min",
        "order": 0,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "x": 490,
        "y": 780,
        "wires": [
            [
                "b327fc252a2d5539"
            ]
        ]
    },
    {
        "id": "b327fc252a2d5539",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "parse string to float",
        "func": "// Parse the string received from the input field into a number\nvar numberValue = parseFloat(msg.payload);\n\n// Check if the parsed value is a valid number\nif (!isNaN(numberValue)) {\n    // Update the payload with the parsed number\n    msg.payload = numberValue;\n    return msg;\n} else {\n    // If the parsed value is not a valid number, log an error and return null\n    node.error('Invalid number received from input field: ' + msg.payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 780,
        "wires": [
            [
                "00c0feeac408b3ea"
            ]
        ]
    },
    {
        "id": "00c0feeac408b3ea",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.min_output",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 780,
        "wires": [
            [
                "a83a0c73e4e7ede0"
            ]
        ]
    },
    {
        "id": "b43e9438d0f98ad2",
        "type": "ui-text-input",
        "z": "b8f36cbcfc882e5f",
        "group": "1a6dfd4456b79d04",
        "name": "",
        "label": "Max",
        "order": 0,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "x": 490,
        "y": 840,
        "wires": [
            [
                "f6a32539ca6488c0"
            ]
        ]
    },
    {
        "id": "f6a32539ca6488c0",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "parse string to float",
        "func": "// Parse the string received from the input field into a number\nvar numberValue = parseFloat(msg.payload);\n\n// Check if the parsed value is a valid number\nif (!isNaN(numberValue)) {\n    // Update the payload with the parsed number\n    msg.payload = numberValue;\n    return msg;\n} else {\n    // If the parsed value is not a valid number, log an error and return null\n    node.error('Invalid number received from input field: ' + msg.payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 840,
        "wires": [
            [
                "74539de83851a580"
            ]
        ]
    },
    {
        "id": "74539de83851a580",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.max_integral",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 840,
        "wires": [
            [
                "a83a0c73e4e7ede0"
            ]
        ]
    },
    {
        "id": "62bfb97cf878e385",
        "type": "ui-text-input",
        "z": "b8f36cbcfc882e5f",
        "group": "1a6dfd4456b79d04",
        "name": "",
        "label": "Min",
        "order": 0,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "x": 490,
        "y": 880,
        "wires": [
            [
                "cee049d6b84587d5"
            ]
        ]
    },
    {
        "id": "cee049d6b84587d5",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "parse string to float",
        "func": "// Parse the string received from the input field into a number\nvar numberValue = parseFloat(msg.payload);\n\n// Check if the parsed value is a valid number\nif (!isNaN(numberValue)) {\n    // Update the payload with the parsed number\n    msg.payload = numberValue;\n    return msg;\n} else {\n    // If the parsed value is not a valid number, log an error and return null\n    node.error('Invalid number received from input field: ' + msg.payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 880,
        "wires": [
            [
                "48910c9aa323dd9b"
            ]
        ]
    },
    {
        "id": "48910c9aa323dd9b",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.min_integral",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 880,
        "wires": [
            [
                "a83a0c73e4e7ede0"
            ]
        ]
    },
    {
        "id": "c2e76731691c8f0c",
        "type": "mqtt in",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "topic": "tele/still2/pidparams",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3fe3ac59af05955a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 560,
        "wires": [
            [
                "7d35ece8291689c4"
            ]
        ]
    },
    {
        "id": "7d35ece8291689c4",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "demux",
        "func": "// Extract values from the incoming MQTT message\nvar kp = msg.payload.kp;\nvar ki = msg.payload.ki;\nvar kd = msg.payload.kd;\nvar max_output = msg.payload.max_output;\nvar min_output = msg.payload.min_output;\nvar max_integral = msg.payload.max_integral;\nvar min_integral = msg.payload.min_integral;\nvar set_point = msg.payload.set_point;\n\n// Send values to the corresponding outputs\nnode.send([ { payload: kp }, { payload: ki }, { payload: kd }, { payload: max_output }, { payload: min_output }, { payload: max_integral }, { payload: min_integral }, { payload: set_point } ]);\n",
        "outputs": 8,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 680,
        "wires": [
            [
                "ddb4b168328b970d"
            ],
            [
                "771567b1dad70170"
            ],
            [
                "0b36887f4db2b0a2"
            ],
            [
                "0e9e6d50b83c4936"
            ],
            [
                "2756333c07364ec5"
            ],
            [
                "b43e9438d0f98ad2"
            ],
            [
                "62bfb97cf878e385"
            ],
            [
                "f605620d23d27738"
            ]
        ]
    },
    {
        "id": "5a9ca290ab06c08b",
        "type": "ui-text-input",
        "z": "b8f36cbcfc882e5f",
        "group": "6d55354a3ff5fc47",
        "name": "",
        "label": "Emulation Temp",
        "order": 0,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "number",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": true,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "e465fcb08971f38f"
            ]
        ]
    },
    {
        "id": "da6af0e73d4d681c",
        "type": "mqtt out",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "topic": "cmnd/still2/pidemulation",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3fe3ac59af05955a",
        "x": 750,
        "y": 1120,
        "wires": []
    },
    {
        "id": "e465fcb08971f38f",
        "type": "function",
        "z": "b8f36cbcfc882e5f",
        "name": "parse string to float",
        "func": "// Parse the string received from the input field into a number\nvar numberValue = parseFloat(msg.payload);\n\n// Check if the parsed value is a valid number\nif (!isNaN(numberValue)) {\n    // Update the payload with the parsed number\n    msg.payload = numberValue;\n    return msg;\n} else {\n    // If the parsed value is not a valid number, log an error and return null\n    node.error('Invalid number received from input field: ' + msg.payload);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1080,
        "wires": [
            [
                "7c3df73e99eb2dc7"
            ]
        ]
    },
    {
        "id": "7c3df73e99eb2dc7",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.temp",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 1080,
        "wires": [
            [
                "da6af0e73d4d681c"
            ]
        ]
    },
    {
        "id": "1598b236e72f813d",
        "type": "ui-switch",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "label": "Enable emulation",
        "group": "6d55354a3ff5fc47",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "className": "",
        "onvalue": "{\"enabled\": true}",
        "onvalueType": "json",
        "onicon": "",
        "oncolor": "",
        "offvalue": "{\"enabled\": false}",
        "offvalueType": "json",
        "officon": "",
        "offcolor": "",
        "x": 150,
        "y": 1140,
        "wires": [
            [
                "da6af0e73d4d681c"
            ]
        ]
    },
    {
        "id": "1747b16b0250142e",
        "type": "mqtt in",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "topic": "tele/still2/init",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "3fe3ac59af05955a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 140,
        "wires": [
            [
                "1f71eea3bb570d71"
            ]
        ]
    },
    {
        "id": "1f71eea3bb570d71",
        "type": "change",
        "z": "b8f36cbcfc882e5f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 140,
        "wires": [
            [
                "c58c12c03de30f99"
            ]
        ]
    },
    {
        "id": "3fe3ac59af05955a",
        "type": "mqtt-broker",
        "name": "MQTT2",
        "broker": "mqtt2.mianos.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "5ee9dce5463cd662",
        "type": "ui-group",
        "name": "Reflux",
        "page": "98530696ee8cd926",
        "width": "6",
        "height": "6",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5835c6daabcd58ef",
        "type": "ui-group",
        "name": "Boiler",
        "page": "98530696ee8cd926",
        "width": "6",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "afe3e22da0747d54",
        "type": "ui-group",
        "name": "PID Monitoring",
        "page": "98530696ee8cd926",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "3a79b1215aa13ae5",
        "type": "ui-group",
        "name": "Control",
        "page": "8344da34cf05e4fd",
        "width": "6",
        "height": "1",
        "order": -1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "e459568c74dfd8b2",
        "type": "ui-group",
        "name": "PID Control",
        "page": "98530696ee8cd926",
        "width": "6",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "2052b505fc6e7465",
        "type": "ui-group",
        "name": "basic params",
        "page": "32d822f9400e65fd",
        "width": "6",
        "height": "1",
        "order": -1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "e629bcb7c26cb922",
        "type": "ui-group",
        "name": "output limits",
        "page": "32d822f9400e65fd",
        "width": "6",
        "height": "1",
        "order": -1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "1a6dfd4456b79d04",
        "type": "ui-group",
        "name": "integral - windup limits",
        "page": "32d822f9400e65fd",
        "width": "6",
        "height": "1",
        "order": -1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6d55354a3ff5fc47",
        "type": "ui-group",
        "name": "Emulation",
        "page": "32d822f9400e65fd",
        "width": "6",
        "height": "1",
        "order": -1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "98530696ee8cd926",
        "type": "ui-page",
        "name": "Monitoring",
        "ui": "c776e0d19c314f0d",
        "path": "/monitor",
        "icon": "home",
        "layout": "grid",
        "theme": "ff6476dcafc85310",
        "order": -1,
        "className": "",
        "visible": true,
        "disabled": "false"
    },
    {
        "id": "8344da34cf05e4fd",
        "type": "ui-page",
        "name": "pumps",
        "ui": "c776e0d19c314f0d",
        "path": "/pumps",
        "icon": "home",
        "layout": "grid",
        "theme": "ff6476dcafc85310",
        "order": -1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "32d822f9400e65fd",
        "type": "ui-page",
        "name": "pid",
        "ui": "c776e0d19c314f0d",
        "path": "/pid",
        "icon": "home",
        "layout": "grid",
        "theme": "ff6476dcafc85310",
        "order": -1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c776e0d19c314f0d",
        "type": "ui-base",
        "name": "Stillerate 2",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default"
    },
    {
        "id": "ff6476dcafc85310",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    }
]